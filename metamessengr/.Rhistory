as.tibble(cleaned_d)
as_tible(cleaned_d)
as_tibble(cleaned_d)
unique(cleaned_d$sent_to)
unique(cleaned_d$convo)
unique(cleaned_d$sender)
unique(cleaned_d$convo)
selection <- function(infile=NULL) {
if(is.null(infile)){
infile = getwd()
}
fns = list.files(path = infile,
recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = sub("//message", "", fns2[[i]]))
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
}
selection(infile="C:/Users/meowy/OneDrive/Documents/School stuff/Yale/BIS 620/fb_mess_final_proj/metamessengr")
infile="C:/Users/meowy/OneDrive/Documents/School stuff/Yale/BIS 620/fb_mess_final_proj/metamessengr"
selection(infile=infile)
selection <- function(infile=NULL) {
if(is.null(infile)){
infile = getwd()
}
fns = list.files(path = infile,
recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
}
selection(infile=infile)
infile = "C:/Users/meowy/OneDrive/Documents/R/Projects/Messenger Analysis/fbm_data_subset"
selection(infile=infile)
selection <- function(infile=NULL) {
if(is.null(infile)){
infile = getwd()
}
fns = list.files(path = infile,
recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
}
selection(infile=infile)
setwd("C:/Users/meowy/OneDrive/Documents/R/Projects/Messenger Analysis/fbm_data_subset")
selection()
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
fns = list.files(path = infile,
recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
}
setwd("C:/Users/meowy/OneDrive/Documents/School stuff/Yale/BIS 620/fb_mess_final_proj/metamessengr")
infile
infile = "C:/Users/meowy/OneDrive/Documents/R/Projects/Messenger Analysis/fbm_data_subset/"
selection(infile=infile)
infile = "C:/Users/meowy/OneDrive/Desktop/fbm_data_subset"
selection(infile=infile)
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
fns = list.files(path = readLines(infile),
recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
}
selection(infile=infile)
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
setwd(infile)
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
}
selection(infile=infile)
getwd()
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
wd <- getwd()
setwd(infile)
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
inp = as.data.frame(f)
setwd(wd)
}
setwd("C:/Users/meowy/OneDrive/Documents/School stuff/Yale/BIS 620/fb_mess_final_proj/metamessengr")
selection(infile=infile)
devtools
devtools::document()
rm(list = c("clean_mess", "selection"))
devtools::document()
n <- selection(infile=infile)
n
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
wd <- getwd()
setwd(infile)
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
setwd(wd)
inp = as.data.frame(f)
}
n <- selection(infile=infile)
n
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
wd <- getwd()
setwd(infile)
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = sub("//message", "", fns2[[i]]))
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
setwd(wd)
inp = as.data.frame(f)
}
n <- selection(infile=infile)
n
class(n$sent_to)
selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
wd <- getwd()
setwd(infile)
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = sub("/message", "", fns2[[i]]))
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
setwd(wd)
inp = as.data.frame(f)
}
n <- selection(infile=infile)
head(n)
devtools::document()
rm(list = c("selection"))
devtools::document()
clean_mess <- function(data) {
ret = data %>%
mutate(timestamp_ms = timestamp_ms/1000,
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"),
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time),
time = as.numeric(time),
hour = time *24,
length = ifelse(nchar(content)>640,
NA,
nchar(content)),
convo = paste(sender_name,"-",sent_to)) %>%
rename(sender = sender_name)
ret
}
cln <- clean_mess(n)
as_tibble(cln)
rm(t)
rm(inp)
rm(f)
rm(clean_mess)
devtools::document()
devtools::document()
devtools::document()
stop_words
mess_selection <- function(infile) {
if(is.null(infile)){
infile = getwd()
}
wd <- getwd()
setwd(infile)
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
inp = lapply(fns,
fromJSON)
l = as.numeric(length(map(inp,2)))
s = seq(from = 1, to = l)
f = NULL
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = sub("/message", "", fns2[[i]]))
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
}
setwd(wd)
inp = as.data.frame(f) %>%
rename(sender = sender_name)
}
n <- mess_selection(infile=infile)
head(n)
tidy_text <- data %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "), #remove special characters
content_c = str_to_lower(content_c),                       #make lowercase
content_c = removeWords(content_c, stop_words$word),        #remove stop words
content_c = removeWords(content_c, stop_slang),          #custom words you dont want
content_c = str_squish(content_c,),#remove whitespace
length = ifelse(nchar(content)>640,
NA,
nchar(content)),
convo = paste(sender_name,"-",sent_to)
) %>%
filter(!is.na(content_c),
content_c != "",
content_c != "connected messenger") #removes default message from facebook when you become fb friends with someone
?removeWords
tidy_text <- dat %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "), #remove special characters
content_c = str_to_lower(content_c),                       #make lowercase
content_c = removeWords(content_c, stop_words$word),        #remove stop words
content_c = removeWords(content_c, stop_slang),          #custom words you dont want
content_c = str_squish(content_c),                        #remove whitespace
) %>%
filter(!is.na(content_c),
content_c != "",
content_c != "connected messenger") #removes default message from facebook when you become fb friends with someone
tidy_text <- cln %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "), #remove special characters
content_c = str_to_lower(content_c),                       #make lowercase
content_c = removeWords(content_c, stop_words$word),        #remove stop words
content_c = removeWords(content_c, stop_slang),          #custom words you dont want
content_c = str_squish(content_c),                        #remove whitespace
) %>%
filter(!is.na(content_c),
content_c != "",
content_c != "connected messenger") #removes default message from facebook when you become fb friends with someone
library(lexicon)
tidy_text <- cln %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "), #remove special characters
content_c = str_to_lower(content_c),                       #make lowercase
content_c = removeWords(content_c, stop_words$word),        #remove stop words
content_c = removeWords(content_c, stop_slang),          #custom words you dont want
content_c = str_squish(content_c),                        #remove whitespace
) %>%
filter(!is.na(content_c),
content_c != "",
content_c != "connected messenger") #removes default message from facebook when you become fb friends with someone
??removeWords
library(tm)
install.packages("tm")
library(tm)
clean_mess_text <- function(data){
tidy_text <- data %>%
mutate(length = ifelse(nchar(content)>640, NA, nchar(content)),
content_unclean = content,
content = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content = str_to_lower(content),
content = removeWords(content, stop_words$word),
content = removeWords(content, stop_slang),
content = str_squish(content,),
convo = paste(sender_name,"-",sent_to)
) %>%
filter(!is.na(content),
content != "",
content != "connected messenger")
}
clean_mess_text(n)
#' Messages that have text longer than 640 characters are removed, as
#' 640 is the character limit for Messenger. Anything longer is bogus.
#'
#' The cleaned version of the text is stored in the original content vector. The
#' original message content is also retained, but stored in the
#' vector: "content_unclean".
#'
#' @param data The original messenger data that was selected using selection()
#'
#' @export
clean_mess_text <- function(data){
tidy_text <- data %>%
mutate(length = ifelse(nchar(content)>640, NA, nchar(content)),
content_unclean = content,
content = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content = str_to_lower(content),
content = removeWords(content, stop_words$word),
content = str_squish(content,),
convo = paste(sender_name,"-",sent_to)
) %>%
filter(!is.na(content),
content != "",
content != "connected messenger")
}
clean_mess_text(n)
str_squish()
?str_squish
clean_mess_text <- function(data){
tidy_text <- data %>%
mutate(length = ifelse(nchar(content)>640, NA, nchar(content)),
content_unclean = content,
content = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content = str_to_lower(content),
content = removeWords(content, stop_words$word),
content = str_squish(content),
convo = paste(sender_name,"-",sent_to)
) %>%
filter(!is.na(content),
content != "",
content != "connected messenger")
}
clean_mess_text(n)
clean_mess_text <- function(data){
tidy_text <- data %>%
mutate(length = ifelse(nchar(content)>640, NA, nchar(content)),
content_unclean = content,
content = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content = str_to_lower(content),
content = removeWords(content, stop_words$word),
content = str_squish(content),
convo = paste(sender,"-",sent_to)
) %>%
filter(!is.na(content),
content != "",
content != "connected messenger")
}
clean_mess_text(n)
cln <- clean_mess_text(cln)
cln
head(cln)
as.tibble(cln)
as_tibble(cln)
document()
rm(list = c("clean_mess_text", "mess_selection"))
document()
