if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
print(i)
}
## Then f, the smaller dataset, is bound to inp and is the output
inp = f
}
n = selection()
## Set wd
setwd("messages/inbox")
selection <- function(inp=NULL) {
## This looks for all of the files that start with "message_" and are .json
## format. It then reads each file in using fromJSON() and assigns to inp
inp = lapply(list.files(recursive = T,
pattern = "\\.json$"),
fromJSON)
## This then takes the inp and finds how many files it read and assigns it l
l = as.numeric(length(map(inp,2)))
## s is called as a sequence from 1 to the previous length (l)
s = seq(from = 1, to = l)
## Setting f to NULL
f = NULL
## For i in the number of files loaded, select the timestamp, sender_name, and
## content of the message. It then makes f = to that selection if it's the
## first file's data, or it row binds the data onto it if it's anything else.
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = select(map(inp,2)[[i]], timestamp_ms, sender_name, content)
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
print(i)
}
## Then f, the smaller dataset, is bound to inp and is the output
inp = f
}
n = selection()
class(n)
n
n = flatten(n)
View(n)
## Turn the timestamp into the format that R likes (not miliseconds)
n$timestamp_ms = n$timestamp_ms/1000
dat = %>%
mutate(timestamp_ms = timestamp_ms/1000)
## Turn the timestamp into the format that R likes (not miliseconds)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms) )
View(dat)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(n$timestamp_ms, format="%H:%M:%S"))
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(n$timestamp_ms, format="%H:%M:%S"),## Make a new row, "date" and have it read in the POSIXct as date
time = chron(times=time),
time = as.numeric(time)
)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"))#
View(dat)
?chron
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time))
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time),
time = as.numeric(time))
View(dat)
#*******************************************************
#Data Cleaning
#*******************************************************
#*
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24) %>% ## New column with sending hour
rename(sender = sender_name)
View(dat)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24,
length = nchar(content)) %>% ## New column with sending hour
rename(sender = sender_name)
View(dat)
#*******************************************************
#Data Cleaning
#*******************************************************
#*
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)) #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
) %>%
rename(sender = sender_name) %>%
## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
n$length[which(n$length>640)] = NA
#*******************************************************
#Data Cleaning
#*******************************************************
#*
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)) #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
) %>%
rename(sender = sender_name)
View(dat)
dat2 <- dat %>%
mutate(content_c = str_extract(content, grady_augmented))
dat2 <- dat %>%
mutate(content_c = str_extract(content, "\\ |[A-Z]"))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_extract(content, "\\ *|[A-Z]*"))
dat2 <- dat %>%
mutate(content_c = str_extract_all(content, "\\ |[A-Z]"))
dat2 <- dat %>%
mutate(content_c = str_extract(content, "[A-Z]+")
dat2 <- dat %>%
mutate(content_c = str_extract(content, "[A-Z]+"))
dat2 <- dat %>%
mutate(content_c = str_extract(content, "[A-Z]+"))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]| ", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]|^ ", ""))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[[:alnum:]]", ""))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "^[[:alnum:]]", ""))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[:alnum:]", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "^ |^[:alnum:]", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "^\w|\d", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]| ", ""))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]|^ ", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]", " "))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]", " "),
content_c = str_replace_all(content, " +", " "))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "^[[:alnum:]]", " "),
content_c = str_replace_all(content, " +", " "))
head(dat2)
x <- "a1~!@#$%^&*(){}_+:\"<>?,./;'[]-="
str_replace_all(x, "^[[:alnum:]]", " ")
x <- "a1~!@#$%^&*(){}_+:\"<>?,./;'[]-="
str_replace_all(x, "[^[:alnum:]]", " ")
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^[:alnum:]]", " "),
content_c = str_replace_all(content, " +", " "))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[[:alnum:]]", " "),
content_c = str_replace_all(content, " +", " "))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[:alnum:]", ""))
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "^[:alnum:]", " "),
#   content_c = str_replace_all(content, " +", " ")
)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "),
#   content_c = str_replace_all(content, " +", " ")
)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content_c = str_replace_all(content, " +", " ")
)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content_c = str_replace_all(content_c, " +", " ")
)
dat_s = dat2 %>%
group_by(sender) %>%
summarise(count = n(),
length = sum(length))
View(dat_s)
dat_s = dat2 %>%
group_by(sender) %>%
summarise(count = n(),
length = sum(length, rm.na = T))
dat_s = dat2 %>%
group_by(sender) %>%
summarise(count = n(),
length = sum(length, na.rm = T))
list.files(recursive = T,
pattern = "\\.json$"
)
fns = list.files(recursive = T,
pattern = "\\.json$"
)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[a-zA-Z0-9]", " "),
content_c = str_replace_all(content_c, " +", " ")
)
dat_s = dat2 %>%
group_by(sender) %>%
summarise(count = n(),
length = sum(length, na.rm = T))
View(dat2)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content_c = str_replace_all(content_c, " +", " ")
)
dat_s = dat2 %>%
group_by(sender) %>%
summarise(count = n(),
length = sum(length, na.rm = T))
fns2 = str_extract(fns, "^*_")
fns2 = str_extract(fns, "^._")
fns2 = str_extract(fns, "^.+_")
fns2 = str_extract(fns, "[^;]*")
fns2
fns2 = str_extract(fns, "[^_]+")
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
head(fns2)
selection <- function(inp=NULL) {
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
## This looks for all of the files that start with "message_" and are .json
## format. It then reads each file in using fromJSON() and assigns to inp
inp = lapply(list.files(recursive = T,
pattern = "\\.json$"),
fromJSON)
## This then takes the inp and finds how many files it read and assigns it l
l = as.numeric(length(map(inp,2)))
## s is called as a sequence from 1 to the previous length (l)
s = seq(from = 1, to = l)
## Setting f to NULL
f = NULL
## For i in the number of files loaded, select the timestamp, sender_name, and
## content of the message. It then makes f = to that selection if it's the
## first file's data, or it row binds the data onto it if it's anything else.
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sender = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
print(i)
}
## Then f, the smaller dataset, is bound to inp and is the output
inp = f
}
n = selection()
View(n)
## This looks for all of the files that start with "message_" and are .json
## format. It then reads each file in using fromJSON() and assigns to inp
inp = lapply(list.files(recursive = T,
pattern = "\\.json$"),
fromJSON)
selection <- function(inp=NULL) {
fns = list.files(recursive = T,
pattern = "\\.json$")
fns2 = str_extract(fns, "[^_]+")
## This looks for all of the files that start with "message_" and are .json
## format. It then reads each file in using fromJSON() and assigns to inp
inp = lapply(list.files(recursive = T,
pattern = "\\.json$"),
fromJSON)
## This then takes the inp and finds how many files it read and assigns it l
l = as.numeric(length(map(inp,2)))
## s is called as a sequence from 1 to the previous length (l)
s = seq(from = 1, to = l)
## Setting f to NULL
f = NULL
## For i in the number of files loaded, select the timestamp, sender_name, and
## content of the message. It then makes f = to that selection if it's the
## first file's data, or it row binds the data onto it if it's anything else.
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
print(i)
}
## Then f, the smaller dataset, is bound to inp and is the output
inp = f
}
n = selection()
selection <- function(inp=NULL) {
#creates list of file names
fns = list.files(recursive = T,
pattern = "\\.json$")
#extracts groups from file name
fns2 = str_extract(fns, "[^_]+")
## This looks for all of the files that start with "message_" and are .json
## format. It then reads each file in using fromJSON() and assigns to inp
inp = lapply(fns,
fromJSON)
## This then takes the inp and finds how many files it read and assigns it l
l = as.numeric(length(map(inp,2)))
## s is called as a sequence from 1 to the previous length (l)
s = seq(from = 1, to = l)
## Setting f to NULL
f = NULL
## For i in the number of files loaded, select the timestamp, sender_name, and
## content of the message. It then makes f = to that selection if it's the
## first file's data, or it row binds the data onto it if it's anything else.
for (i in s) {
if("content" %in% names(inp[[i]][[2]])){
t = map(inp,2)[[i]] %>%
select(timestamp_ms, sender_name, content) %>%
mutate(sent_to = fns2[[i]])
if (i == 1){
f=t
} else {
f = rbind(f, t)
}
}
print(i)
}
## Then f, the smaller dataset, is bound to inp and is the output
inp = f
}
n = selection()
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)) #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
) %>%
rename(sender = sender_name)
View(dat2)
View(dat)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)) #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
) %>%
rename(sender = sender_name)
dat2 <- dat %>%
mutate(content_c = str_replace_all(content, "[^a-zA-Z0-9]", " "),
content_c = str_replace_all(content_c, " +", " ")
)
dat_s2 = dat2 %>%
group_by(sent_to) %>%
summarise(count = n(),
length = sum(length, na.rm = T))
View(dat_s2)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)) #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
convo = paste(sender,sent_to, "-")) %>%
rename(sender = sender_name)
#*******************************************************
#Data Cleaning
#*******************************************************
#*
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)), #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
convo = paste(sender_name,sent_to, "-")) %>%
rename(sender = sender_name)
View(dat)
dat = n %>%
mutate(timestamp_ms = timestamp_ms/1000,## Turn the timestamp into the format that R likes (not miliseconds)
timestamp_ms = as.POSIXct(timestamp_ms,
origin="1970-01-01",
tz="America/Los_Angeles"), ## Have it convert the timestamp to POSIXct
date = as.Date(timestamp_ms),
time = strftime(timestamp_ms, format="%H:%M:%S"),
time = chron(times=time), ## Further time cleaning
time = as.numeric(time),
hour = time *24, ## New column with sending hour
length = ifelse(nchar(content)>640, #nchar >640
NA, #true
nchar(content)), #FALSE ## Messenger only allows messages of 640 characters or less. Setting anything
## above that to NA as anything else is bogus
convo = paste(sender_name,"-",sent_to)) %>%
rename(sender = sender_name)
View(dat_s2)
